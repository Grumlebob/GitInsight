@page "/Commits"
@using GitInsight.Web.Services
@using GitInsight.Core
@inject IAnalysisService _analysisService
@inject HttpClient _httpClient

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h1> You need to sign in</h1>
    </NotAuthorized>
    <Authorized>
        <TitleCard Title="Commits by Date"/>
        <RepoPathPicker OnChange="load" Disabled="@loading"></RepoPathPicker>

        @* <p role="status" id="consolewriteline">@outputText</p> *@
        @if (loading)
        {
            <RadzenCard Style="width: 400px;" class="mb-1">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Loading</RadzenText>
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            </RadzenCard>
        }
        @if (_commitsByAuthors != null && _commitsByAuthors.Any())
        {
            var multiplier = 20;
            if (_commitsByDate.Count < 16)
            {
                multiplier = 35;
            }
            if (_commitsByDate.Count < 5)
            {
                multiplier = 85;
            }
            var height = _commitsByDate.Count * multiplier;
            var heightAuthors = _commitsByAuthors.Max(c => c.CommitsByDates.Count) * multiplier;
            <BarChart Author="All Contributors" Data="@FormatDates(_commitsByDate)" Height="@height"/>
            <div style="padding-top: 20px;">
                <RadzenCard Style="width: 400px; background-color: #cac4fe; padding-bottom: 10px;" Class="rz-border-radius-3">
                    <h1>Commits by Author</h1>
                </RadzenCard>
            </div>
            <div class="container">
                <div class="row align-items-center justify-content-center">


                    @foreach (var commitsByAuthor in _commitsByAuthors)
                    {
                        <div class="w-50">
                            <BarChart Author="@commitsByAuthor.AuthorName" Data="@FormatDates(commitsByAuthor.CommitsByDates)" Height="@heightAuthors"/>
                        </div>
                    }
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private string user;
    private string repo;
    private bool loading;
    // private string outputText;
    private List<CommitsByDateByAuthor> _commitsByAuthors = new();
    private List<CommitsByDate> _commitsByDate = new();

    public List<CommitsByDateFormatted> FormatDates(IEnumerable<CommitsByDate> commitsByDate)
    {
        var formattedDates = new List<CommitsByDateFormatted>();
        foreach (var date in commitsByDate)
        {
            var formattedDate = date.Date.ToString("dd MMM");
            formattedDates.Add(new CommitsByDateFormatted { Date = formattedDate, CommitAmount = date.CommitAmount });
        }

        return formattedDates;
    }


    public async Task GetRepo()
    {
        loading = true;
        _commitsByAuthors = await _analysisService.GetCommitsByAuthor($"repoinsights/{RepoPathContainer.pickedRepo}");
        _commitsByDate = await _analysisService.GetCommitsByDate($"repoinsights/{RepoPathContainer.pickedRepo}");
        loading = false;
    // outputText = _commitsByAuthors.Count.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    public async Task load()
    {
        if (RepoPathContainer.pickedRepo != null) await GetRepo();
    }

}







@* <SurveyPrompt Title="How is Blazor working for you?"/> *@
