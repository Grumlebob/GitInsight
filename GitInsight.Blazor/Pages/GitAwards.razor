@page "/GitAwards"
@using GitInsight.Core
@using GitInsight.Web.Services
@inject IAnalysisService _analysisService

<AuthorizeView>
    <NotAuthorized>
        <h1> You need to sign in</h1>
    </NotAuthorized>
    <Authorized>
        <div style="padding-bottom: 20px;">
                    <RadzenCard Style="width: 400px; background-color: #cac4fe; padding-bottom: 5px;" Class="rz-border-radius-3">
                        <h2>Git Awards</h2>
                    </RadzenCard>
                </div>

     <RepoPathPicker OnChange="load" Disabled="@loading"></RepoPathPicker>

        @* <p role="status" id="consolewriteline">@outputText</p> *@
       @if (loading)
              {
                  <div style="padding-top: 10px;">
        <RadzenCard Style="width: 400px;">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Loading</RadzenText>
            <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenCard>
       </div>
              }

        @if (earlyBirdWinner != null)
        {
            <div class="row align-items-left justify-content-left" style="padding-right: 24vw">
                @if (earlyBirdWinner.Value>0)
                {
                    <GitAward AwardWinner="@earlyBirdWinner" AwardTitle="Early Bird" AwardDescription="Most commits in the time frame 06:00-10:00" ImageFileName="earlybird.jpg"></GitAward>
                }
                @if (nightOwlWinner.Value > 0)
                {
                    <GitAward AwardWinner="@nightOwlWinner" AwardTitle="Night Owl" AwardDescription="Most commits in the time frame 00:00-06:00" ImageFileName="nightowl.jpg"></GitAward>
                }
            </div>
        }

    </Authorized>
</AuthorizeView>
@code {
    private string user;
    private string repo;
    // private string outputText;
    private GitAwardWinner? earlyBirdWinner = null;
    private GitAwardWinner? nightOwlWinner = null;
    private bool loading;

    public async Task GetRepo()
    {
        loading = true;
        earlyBirdWinner = await _analysisService.EarlyBird(RepoPathContainer.pickedRepo);
        nightOwlWinner = await _analysisService.NightOwl(RepoPathContainer.pickedRepo);
        loading = false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await load();
    }
    
    public async Task load()
    {
        if (RepoPathContainer.pickedRepo != null) await GetRepo();
    }
}