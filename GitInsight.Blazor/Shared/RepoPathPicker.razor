@using GitInsight.Blazor.Services
@using System.Net
@inject NotificationService NotificationService
@inject IAnalysisService AnalysisService

<RadzenDropDown AllowClear="true" TValue="string"
                Data=@RepoPathContainer.RepositoryPaths
                                         @bind-value="@Path" Change="@Invoke" placeholder="Pick a Repository"
                Disabled="@Disabled"/>

<RadzenButton class="rz-ripple" IsBusy="_adding" Click="@ShowAdding">Add Repo</RadzenButton>

@if (_adding)
{
    <div style="padding-top: 10px">
        <form onsubmit="@AddRepo">
            <RadzenTextBox type="text" @bind-value="@_user" placeholder="Username or organization"/>
            <RadzenTextBox type="text" @bind-value="@_repo" placeholder="Repository name"/>
            <RadzenButton type="submit" class="rz-ripple" Disabled="@_loading" >Add</RadzenButton>
        </form>
    </div>
    @if (_loading)
    {
        <div style="padding-top: 10px;">
            <RadzenCard Style="width: 400px;">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Loading</RadzenText>
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
            </RadzenCard>
        </div>
    }
}

@code {
    private string _user = null!;
    private string _repo = null!;
    private bool _adding;
    private bool _loading;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    private string Path
    {
        get { return RepoPathContainer.PickedRepositoryPath!; }
        set { RepoPathContainer.PickedRepositoryPath = value; }
    }

    private void ShowAdding()
    {
        _adding = true;
    }

    private async Task AddRepo()
    {
        var pathString = $"{_user}/{_repo}";
        pathString = pathString.ToLower();
        if (RepoPathContainer.RepositoryPaths.Contains(pathString))
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Repository has already been added", Detail = "", Duration = 4000 });
            return;
        }
        try
        {
            _loading = true;
            await AnalysisService.GetCommitsByAuthor($"repoinsights/{pathString}");
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.BadRequest)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Repository", Detail = "The given repository either doesn't exist or is not public", Duration = 5000 });
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Server Error", Detail = "The server failed for an unknown reason", Duration = 5000 });
            }

            _loading = false;
            return;
        }
        _loading = false;
        RepoPathContainer.RepositoryPaths.Add(pathString);
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Repository Added", Detail = "", Duration = 4000 });
        _adding = false;
    }


    private async Task Invoke()
    {
        await OnChange.InvokeAsync();
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.WriteLine($"{message.Severity} notification");
    }

}
